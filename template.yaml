AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'ImageService Global Setup'


## Bucket names - override in sam deploy for custom names
Parameters:
  INBucketName:
    Type: String
    Default: 'imageservice-s3'
  OUTBucketName:
    Type: String
    Default: 'imageservice-s3-resized'


## S3 buckets
Resources:
  TPBucket:
    Type: AWS::S3::Bucket  
    Properties:
      BucketName: !Ref INBucketName
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true

  ECSBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref OUTBucketName

# Used by any target functions to access the S3
# buckets. If more buckets need to be added, add here
# instead of at each function.

  MyManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: imageservice-buckets-policy
      PolicyDocument: 
        Version: 2012-10-17
        Statement: 
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:ListBucket
              - s3:GetBucketLocation
              - s3:GetObjectVersion
              - s3:GetLifecycleConfiguration
              - s3:PutObject
              - s3:DeleteObject
            Resource:
              - !Sub 'arn:aws:s3:::${TPBucket}/*'
              - !Sub 'arn:aws:s3:::${ECSBucket}/*'


#
# Compress step
#

  # EventBridge rules 
  EventRuleCompress: 
    Type: AWS::Events::Rule
    Properties: 
      Description: "myECM parse S3 Event"
      State: "ENABLED"
      EventPattern: 
        source: 
          - "aws.s3"
        detail-type:
          - "Object Created"        
        detail:
          bucket:
            name:
              - !Ref INBucketName
      Targets: 
        - Arn: 
            Fn::GetAtt: 
              - "CompressFunction"
              - "Arn"
          Id: "LoadToDB"            

  # EventBridge permissions to invoke Lambda functions
  PermissionForEventsToInvokeLambdaLoadToDB: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "CompressFunction"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "EventRuleCompress"
          - "Arn"

  # Lambda functions
  CompressFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: compress/
      Handler: app.handler
      Runtime: nodejs20.x
      Timeout: 5
      MemorySize: 1024
      Policies:
      # Read more about SAM policy templates here
      # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-templates.html
       - !Ref MyManagedPolicy
       - AWSLambdaExecute
       - DynamoDBCrudPolicy:
          TableName: !Ref MyImageServiceDynamoDBTable
      Environment:
        Variables:
          DBTableName: !Ref MyImageServiceDynamoDBTable
          OUTBucketName: !Ref OUTBucketName
  
  MyImageServiceDynamoDBTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    Properties:
      #TableName: MyECMTable
      AttributeDefinitions:
        - AttributeName: Id
          AttributeType: S
        - AttributeName: Type
          AttributeType: S
        - AttributeName: Date
          AttributeType: S
      KeySchema:
        - AttributeName: Id
          KeyType: HASH
        - AttributeName: Date
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      ProvisionedThroughput:
        ReadCapacityUnits: 0
        WriteCapacityUnits: 0
      GlobalSecondaryIndexes:
        - IndexName: type-index
          KeySchema:
            - AttributeName: Type
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 0
            WriteCapacityUnits: 0




